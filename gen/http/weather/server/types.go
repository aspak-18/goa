// Code generated by goa v3.11.0, DO NOT EDIT.
//
// weather HTTP server types
//
// Command:
// $ goa gen example/design

package server

import (
	weather "example/gen/weather"
)

// ShowResponseBody is the type of the "weather" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Temperature in Celsius
	Temp float64 `form:"temp" json:"temp" xml:"temp"`
	// Wind speed in meters per second
	WindSpeed float64 `form:"wind_speed" json:"wind_speed" xml:"wind_speed"`
	// Humidity in percent
	Humidity float64 `form:"humidity" json:"humidity" xml:"humidity"`
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "weather" service.
func NewShowResponseBody(res *weather.Weather) *ShowResponseBody {
	body := &ShowResponseBody{
		Temp:      res.Temp,
		WindSpeed: res.WindSpeed,
		Humidity:  res.Humidity,
	}
	return body
}

// NewShowPayload builds a weather service show endpoint payload.
func NewShowPayload(city string) *weather.ShowPayload {
	v := &weather.ShowPayload{}
	v.City = city

	return v
}
