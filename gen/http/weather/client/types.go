// Code generated by goa v3.11.0, DO NOT EDIT.
//
// weather HTTP client types
//
// Command:
// $ goa gen example/design

package client

import (
	weather "example/gen/weather"

	goa "goa.design/goa/v3/pkg"
)

// ShowResponseBody is the type of the "weather" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Temperature in Celsius
	Temp *float64 `form:"temp,omitempty" json:"temp,omitempty" xml:"temp,omitempty"`
	// Wind speed in meters per second
	WindSpeed *float64 `form:"wind_speed,omitempty" json:"wind_speed,omitempty" xml:"wind_speed,omitempty"`
	// Humidity in percent
	Humidity *float64 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
}

// NewShowWeatherOK builds a "weather" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowWeatherOK(body *ShowResponseBody) *weather.Weather {
	v := &weather.Weather{
		Temp:      *body.Temp,
		WindSpeed: *body.WindSpeed,
		Humidity:  *body.Humidity,
	}

	return v
}

// ValidateShowResponseBody runs the validations defined on ShowResponseBody
func ValidateShowResponseBody(body *ShowResponseBody) (err error) {
	if body.Temp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temp", "body"))
	}
	if body.WindSpeed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wind_speed", "body"))
	}
	if body.Humidity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("humidity", "body"))
	}
	return
}
